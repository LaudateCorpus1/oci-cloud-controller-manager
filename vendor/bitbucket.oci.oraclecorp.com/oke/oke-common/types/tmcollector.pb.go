// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tmcollector.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import nodepools "bitbucket.oci.oraclecorp.com/oke/oke-common/types/nodepools"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClusterNodesState struct {
	ClusterID      string                              `protobuf:"bytes,1,opt,name=ClusterID" json:"ClusterID,omitempty"`
	NodePoolStates map[string]*nodepools.NodePoolState `protobuf:"bytes,2,rep,name=NodePoolStates" json:"NodePoolStates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ChangedAt      *google_protobuf1.Timestamp         `protobuf:"bytes,3,opt,name=ChangedAt" json:"ChangedAt,omitempty"`
}

func (m *ClusterNodesState) Reset()                    { *m = ClusterNodesState{} }
func (m *ClusterNodesState) String() string            { return proto.CompactTextString(m) }
func (*ClusterNodesState) ProtoMessage()               {}
func (*ClusterNodesState) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ClusterNodesState) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *ClusterNodesState) GetNodePoolStates() map[string]*nodepools.NodePoolState {
	if m != nil {
		return m.NodePoolStates
	}
	return nil
}

func (m *ClusterNodesState) GetChangedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ChangedAt
	}
	return nil
}

type ClusterNodesStateResponse struct {
	NodePools []*nodepools.NodePool `protobuf:"bytes,1,rep,name=NodePools" json:"NodePools,omitempty"`
}

func (m *ClusterNodesStateResponse) Reset()                    { *m = ClusterNodesStateResponse{} }
func (m *ClusterNodesStateResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterNodesStateResponse) ProtoMessage()               {}
func (*ClusterNodesStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ClusterNodesStateResponse) GetNodePools() []*nodepools.NodePool {
	if m != nil {
		return m.NodePools
	}
	return nil
}

type TMCollectorToken struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *TMCollectorToken) Reset()                    { *m = TMCollectorToken{} }
func (m *TMCollectorToken) String() string            { return proto.CompactTextString(m) }
func (*TMCollectorToken) ProtoMessage()               {}
func (*TMCollectorToken) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *TMCollectorToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterNodesState)(nil), "types.ClusterNodesState")
	proto.RegisterType((*ClusterNodesStateResponse)(nil), "types.ClusterNodesStateResponse")
	proto.RegisterType((*TMCollectorToken)(nil), "types.TMCollectorToken")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TMCollector service

type TMCollectorClient interface {
	PublishClusterNodesState(ctx context.Context, in *ClusterNodesState, opts ...grpc.CallOption) (*ClusterNodesStateResponse, error)
	Version(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*BuildInfo, error)
}

type tMCollectorClient struct {
	cc *grpc.ClientConn
}

func NewTMCollectorClient(cc *grpc.ClientConn) TMCollectorClient {
	return &tMCollectorClient{cc}
}

func (c *tMCollectorClient) PublishClusterNodesState(ctx context.Context, in *ClusterNodesState, opts ...grpc.CallOption) (*ClusterNodesStateResponse, error) {
	out := new(ClusterNodesStateResponse)
	err := grpc.Invoke(ctx, "/types.TMCollector/PublishClusterNodesState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tMCollectorClient) Version(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*BuildInfo, error) {
	out := new(BuildInfo)
	err := grpc.Invoke(ctx, "/types.TMCollector/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TMCollector service

type TMCollectorServer interface {
	PublishClusterNodesState(context.Context, *ClusterNodesState) (*ClusterNodesStateResponse, error)
	Version(context.Context, *google_protobuf.Empty) (*BuildInfo, error)
}

func RegisterTMCollectorServer(s *grpc.Server, srv TMCollectorServer) {
	s.RegisterService(&_TMCollector_serviceDesc, srv)
}

func _TMCollector_PublishClusterNodesState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterNodesState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TMCollectorServer).PublishClusterNodesState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.TMCollector/PublishClusterNodesState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TMCollectorServer).PublishClusterNodesState(ctx, req.(*ClusterNodesState))
	}
	return interceptor(ctx, in, info, handler)
}

func _TMCollector_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TMCollectorServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.TMCollector/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TMCollectorServer).Version(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TMCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.TMCollector",
	HandlerType: (*TMCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishClusterNodesState",
			Handler:    _TMCollector_PublishClusterNodesState_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _TMCollector_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmcollector.proto",
}

func init() { proto.RegisterFile("tmcollector.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0x85, 0x6c, 0xb8, 0x85, 0x69, 0xa0, 0xb0, 0x99, 0xa2, 0x50, 0x84, 0x0e, 0x86, 0x27, 0x0f,
	0x2d, 0x85, 0xd8, 0x4b, 0xd0, 0x4e, 0x8d, 0x9b, 0x21, 0x43, 0x83, 0x40, 0x35, 0x32, 0xb4, 0x13,
	0x45, 0x5f, 0x64, 0xc1, 0x14, 0x8f, 0x10, 0x4f, 0x05, 0xfc, 0x2b, 0x1d, 0xfa, 0xad, 0x85, 0x29,
	0x39, 0x6a, 0xaa, 0x18, 0x19, 0x24, 0x1c, 0xef, 0xde, 0x7b, 0xbc, 0x7b, 0x3c, 0x36, 0xa1, 0x42,
	0xa1, 0xd6, 0xa0, 0x08, 0x4b, 0x61, 0x4b, 0x24, 0xe4, 0x03, 0xda, 0x5b, 0x70, 0xd1, 0x32, 0xcb,
	0x69, 0x5b, 0xa5, 0x42, 0x61, 0x11, 0x67, 0xa8, 0xa5, 0xc9, 0x62, 0x5f, 0x4f, 0xab, 0x87, 0xd8,
	0x7a, 0x48, 0x0c, 0x85, 0xa5, 0x7d, 0xfd, 0xaf, 0xb9, 0xd1, 0xe7, 0x97, 0x49, 0x94, 0x17, 0xe0,
	0x48, 0x16, 0xb6, 0x8d, 0x1a, 0xf2, 0x84, 0xc0, 0x48, 0x43, 0x32, 0x03, 0x43, 0x4d, 0xea, 0xdc,
	0xe0, 0x06, 0x2c, 0xa2, 0x76, 0xf1, 0x63, 0x54, 0x97, 0x66, 0x7f, 0x7a, 0x6c, 0xb2, 0xd2, 0x95,
	0x23, 0x28, 0x6f, 0x71, 0x03, 0xee, 0x3b, 0x49, 0x02, 0xfe, 0x9e, 0x0d, 0x9b, 0xe4, 0xcd, 0xd7,
	0x30, 0x98, 0x06, 0xf3, 0x61, 0xd2, 0x26, 0xf8, 0x9a, 0xbd, 0x39, 0x60, 0xef, 0x10, 0xb5, 0x87,
	0xbb, 0xb0, 0x37, 0xed, 0xcf, 0x47, 0x8b, 0x0f, 0xc2, 0xf7, 0x26, 0x3a, 0x7a, 0xe2, 0x29, 0xfc,
	0xda, 0x50, 0xb9, 0x4f, 0xfe, 0xd3, 0xe0, 0x97, 0x6c, 0xb8, 0xda, 0x4a, 0x93, 0xc1, 0xe6, 0x0b,
	0x85, 0xfd, 0x69, 0x30, 0x1f, 0x2d, 0x22, 0x91, 0x21, 0x66, 0x1a, 0xc4, 0x71, 0x7a, 0xb1, 0x3e,
	0x0e, 0x9b, 0xb4, 0xe0, 0xe8, 0x27, 0x3b, 0x7b, 0xe6, 0x02, 0x3e, 0x66, 0xfd, 0x1d, 0xec, 0x9b,
	0xf6, 0x0f, 0x21, 0x17, 0x6c, 0xf0, 0x4b, 0xea, 0x0a, 0xc2, 0x9e, 0x97, 0x0f, 0x45, 0xeb, 0xc6,
	0x13, 0x81, 0xa4, 0x86, 0x7d, 0xea, 0x5d, 0x06, 0xb3, 0x5b, 0x76, 0xde, 0x99, 0x27, 0x01, 0x67,
	0xd1, 0x38, 0xe0, 0x17, 0x6c, 0x78, 0x24, 0xba, 0x30, 0xf0, 0x26, 0x9c, 0x3d, 0x23, 0x9a, 0xb4,
	0xa8, 0xd9, 0x9c, 0x8d, 0xd7, 0xdf, 0x56, 0xc7, 0x65, 0x59, 0xe3, 0x0e, 0x0c, 0x7f, 0xcb, 0x06,
	0x3e, 0x68, 0x7a, 0xad, 0x0f, 0x8b, 0xdf, 0x01, 0x1b, 0xfd, 0x03, 0xe5, 0xf7, 0x2c, 0xbc, 0xab,
	0x52, 0x9d, 0xbb, 0x6d, 0xf7, 0xc1, 0xc2, 0x53, 0xd6, 0x47, 0xd3, 0x53, 0x95, 0xc7, 0x21, 0x96,
	0xec, 0xf5, 0x3d, 0x94, 0x2e, 0x47, 0xc3, 0xdf, 0x75, 0x0c, 0xbf, 0x3e, 0xac, 0x65, 0x34, 0x6e,
	0x44, 0xae, 0xaa, 0x5c, 0x6f, 0x6e, 0xcc, 0x03, 0x5e, 0x2d, 0x7f, 0x5c, 0xa4, 0x39, 0xa5, 0x95,
	0xda, 0x01, 0x09, 0x54, 0xb9, 0xc0, 0x52, 0x2a, 0x0d, 0x0a, 0x4b, 0xeb, 0xd7, 0x16, 0x77, 0x70,
	0xf8, 0x3e, 0x2a, 0x2c, 0x0a, 0x34, 0xb1, 0xa7, 0xa7, 0xaf, 0xbc, 0xec, 0xf2, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc2, 0x68, 0x6f, 0xb5, 0x2f, 0x03, 0x00, 0x00,
}
